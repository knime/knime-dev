<?xml version="1.0" encoding="utf-8"?>
<knimeNode type="Other" icon="equals.png" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
    <name>Image Difference Checker</name>

    <shortDescription>
        Compares the two image port objects.
    </shortDescription>

    <fullDescription>
        <intro>
            <p>
                Used in regression tests to test the created image with a reference image. The node will compare
                (depending on the dialog settings) the incoming images during execute and
                fails with an exception if they are not equal (or do not meet
                the expectations). In that case the node stays not executed and the
                test will fail.
            </p>
            <p>
                In the node's dialog, you can adjust how individual the images are compared. The default is to check for
                exact equality. For certain images you can relax the comparison by using special checkers, e.g. by
                specifying a certain allowed percentage of difference.
            </p>
            <p>
            Currently there are four different image checker available:
            <ul>
                <li><a href="http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html">pHash</a>, 
                which first downscales the image to the given size, converts it to grayscale, computes a discrete cosinus
                transformation (DCT) and finally takes only the given left upper part of the matrix (the low frequencies
                in the picture). Finally the two small matrices from both images are compared.
                </li>
                <li><a href="http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html">dHash</a>,
                which works similar to the above, but skips the DCT step and compares difference between neighbouring pixels
                in the downscaled images.
                </li>
                <li>A histogram-based comparison. It computes histograms for each of the three color channels with a 
                configurable number of equal-sized bins. Then the difference between all pairs of bins between the
                two images are summed up and normalized for a percentage value.</li>
                <li>Full difference compares the complete images. For each pixel and each color channel (excluding the
                alpha channel for now) the differences between reference and test image are summed up and then divided
                by the maximum possible differences.
                </li>
            </ul>
            In all cases a percentage between 0 and 100 is computed and compared to the given threshold.
            </p>
        </intro>
    </fullDescription>

    <ports>
        <inPort index="0" name="Test Image">Freshly created image that is tested.</inPort>
        <inPort index="1" name="Reference Image">The reference image.</inPort>
    </ports>
</knimeNode>